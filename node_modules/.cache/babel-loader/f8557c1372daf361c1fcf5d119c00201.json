{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, isReactNative, isNode, getUA, isIE, isIndexedDBAvailable, FirebaseError } from '@firebase/util';\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.2.19\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme() {\n  var _a;\n\n  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\n\n\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\n\n\nfunction _isAndroidOrIosCordovaScheme() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:' || _getCurrentScheme() === 'capacitor:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));\n}\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\n\n\nfunction _isNativeEnvironment() {\n  return isReactNative() || isNode();\n}\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\n\n\nfunction _isIe11() {\n  return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\n}\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\n\n\nfunction _isEdge() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return /Edge\\/\\d+/.test(ua);\n}\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\n\n\nfunction _isLocalStorageNotSynchronized() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return _isIe11() || _isEdge(ua);\n}\n/** @return {boolean} Whether web storage is supported. */\n\n\nfunction _isWebStorageSupported() {\n  try {\n    const storage = self.localStorage;\n\n    const key = exp._generateEventId();\n\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key); // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n\n  return false;\n}\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\n\n\nfunction _isWorker() {\n  // WorkerGlobalScope only defined in worker environment.\n  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;\n}\n\nfunction _isPopupRedirectSupported() {\n  return (_isHttpOrHttps() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) && // React Native with remote debugging reports its location.protocol as\n  // http.\n  !_isNativeEnvironment() && // Local storage has to be supported for browser popup and redirect\n  // operations to work.\n  _isWebStorageSupported() && // DOM, popups and redirects are not supported within a worker.\n  !_isWorker();\n}\n/** Quick check that indicates the platform *may* be Cordova */\n\n\nfunction _isLikelyCordova() {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nasync function _isCordova() {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nfunction _getSelfWindow() {\n  return typeof window !== 'undefined' ? window : null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\nconst _assert$3 = exp._assert;\nconst PERSISTENCE_KEY = 'persistence';\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\n\nfunction _validatePersistenceArgument(auth, persistence) {\n  _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\"\n  /* INVALID_PERSISTENCE */\n  ); // Validate if the specified type is supported in the current environment.\n\n\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  } // This is restricted by what the browser supports.\n\n\n  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\"\n  /* UNSUPPORTED_PERSISTENCE */\n  );\n}\n\nasync function _savePersistenceForRedirect(auth) {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\n\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nfunction _getPersistencesFromRedirect(apiKey, appName) {\n  const session = getSessionStorageIfAvailable();\n\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n\n    default:\n      return [];\n  }\n}\n/** Returns session storage, or null if the property access errors */\n\n\nfunction getSessionStorageIfAvailable() {\n  var _a;\n\n  try {\n    return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\n  } catch (e) {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst _assert$2 = exp._assert;\n/** Platform-agnostic popup-redirect resolver */\n\nclass CompatPopupRedirectResolver {\n  constructor() {\n    // Create both resolvers for dynamic resolution later\n    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\n    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver); // The actual resolver in use: either browserResolver or cordovaResolver.\n\n    this.underlyingResolver = null;\n    this._redirectPersistence = exp.browserSessionPersistence;\n    this._completeRedirectFn = exp._getRedirectResult;\n    this._overrideRedirectResult = exp._overrideRedirectResult;\n  }\n\n  async _initialize(auth) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\n  }\n\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\n  }\n\n  _isIframeWebStorageSupported(auth, cb) {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth) {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively() {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  get assertedUnderlyingResolver() {\n    _assert$2(this.underlyingResolver, \"internal-error\"\n    /* INTERNAL_ERROR */\n    );\n\n    return this.underlyingResolver;\n  }\n\n  async selectUnderlyingResolver() {\n    if (this.underlyingResolver) {\n      return;\n    } // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n\n\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction unwrap(object) {\n  return object.unwrap();\n}\n\nfunction wrapped(object) {\n  return object.wrapped();\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction credentialFromResponse(userCredential) {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth, e) {\n  var _a, _b; // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n\n\n  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\n\n  if (((_b = e) === null || _b === void 0 ? void 0 : _b.code) === 'auth/multi-factor-auth-required') {\n    const mfaErr = e;\n    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e;\n\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(object) {\n  const {\n    _tokenResponse\n  } = object instanceof FirebaseError ? object.customData : object;\n\n  if (!_tokenResponse) {\n    return null;\n  } // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n\n\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId; // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider;\n\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse;\n\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      } // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n\n\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);\n}\n\nfunction convertCredential(auth, credentialPromise) {\n  return credentialPromise.catch(e => {\n    if (e instanceof FirebaseError) {\n      attachExtraErrorFields(auth, e);\n    }\n\n    throw e;\n  }).then(credential => {\n    const operationType = credential.operationType;\n    const user = credential.user;\n    return {\n      operationType,\n      credential: credentialFromResponse(credential),\n      additionalUserInfo: exp.getAdditionalUserInfo(credential),\n      user: User.getOrCreate(user)\n    };\n  });\n}\n\nasync function convertConfirmationResult(auth, confirmationResultPromise) {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver {\n  constructor(auth, resolver) {\n    this.resolver = resolver;\n    this.auth = wrapped(auth);\n  }\n\n  get session() {\n    return this.resolver.session;\n  }\n\n  get hints() {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(assertion) {\n    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass User {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user) {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user);\n  }\n\n  delete() {\n    return this._delegate.delete();\n  }\n\n  reload() {\n    return this._delegate.reload();\n  }\n\n  toJSON() {\n    return this._delegate.toJSON();\n  }\n\n  getIdTokenResult(forceRefresh) {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n\n  getIdToken(forceRefresh) {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n\n  linkAndRetrieveDataWithCredential(credential) {\n    return this.linkWithCredential(credential);\n  }\n\n  async linkWithCredential(credential) {\n    return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));\n  }\n\n  async linkWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  async linkWithPopup(provider) {\n    return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async linkWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  reauthenticateAndRetrieveDataWithCredential(credential) {\n    return this.reauthenticateWithCredential(credential);\n  }\n\n  async reauthenticateWithCredential(credential) {\n    return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));\n  }\n\n  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  reauthenticateWithPopup(provider) {\n    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async reauthenticateWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  sendEmailVerification(actionCodeSettings) {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n\n  async unlink(providerId) {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n\n  updateEmail(newEmail) {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n\n  updatePassword(newPassword) {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n\n  updatePhoneNumber(phoneCredential) {\n    return exp.updatePhoneNumber(this._delegate, phoneCredential);\n  }\n\n  updateProfile(profile) {\n    return exp.updateProfile(this._delegate, profile);\n  }\n\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\n  }\n\n  get emailVerified() {\n    return this._delegate.emailVerified;\n  }\n\n  get isAnonymous() {\n    return this._delegate.isAnonymous;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get phoneNumber() {\n    return this._delegate.phoneNumber;\n  }\n\n  get providerData() {\n    return this._delegate.providerData;\n  }\n\n  get refreshToken() {\n    return this._delegate.refreshToken;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  get displayName() {\n    return this._delegate.displayName;\n  }\n\n  get email() {\n    return this._delegate.email;\n  }\n\n  get photoURL() {\n    return this._delegate.photoURL;\n  }\n\n  get providerId() {\n    return this._delegate.providerId;\n  }\n\n  get uid() {\n    return this._delegate.uid;\n  }\n\n  get auth() {\n    return this._delegate.auth;\n  }\n\n} // Maintain a map so that there's always a 1:1 mapping between new User and\n// legacy compat users\n\n\nUser.USER_MAP = new WeakMap();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert$1 = exp._assert;\n\nclass Auth {\n  constructor(app, provider) {\n    this.app = app;\n\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate();\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const {\n      apiKey\n    } = app.options; // TODO: platform needs to be determined using heuristics\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // TODO: platform needs to be determined using heuristics\n\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // Only use a popup/redirect resolver in browser environments\n\n\n    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    });\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig() {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser() {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n\n  get languageCode() {\n    return this._delegate.languageCode;\n  }\n\n  set languageCode(languageCode) {\n    this._delegate.languageCode = languageCode;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  set tenantId(tid) {\n    this._delegate.tenantId = tid;\n  }\n\n  useDeviceLanguage() {\n    this._delegate.useDeviceLanguage();\n  }\n\n  signOut() {\n    return this._delegate.signOut();\n  }\n\n  useEmulator(url, options) {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n\n  applyActionCode(code) {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code) {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));\n  }\n\n  fetchProvidersForEmail(email) {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n\n  async getRedirectResult() {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);\n\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  } // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n\n\n  addFrameworkForLogging(framework) {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onAuthStateChanged(next, error, complete);\n  }\n\n  onIdTokenChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onIdTokenChanged(next, error, complete);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\n  }\n\n  async setPersistence(persistence) {\n    _validatePersistenceArgument(this._delegate, persistence);\n\n    let converted;\n\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();\n        converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;\n        break;\n\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n\n      default:\n        return exp._fail(\"argument-error\"\n        /* ARGUMENT_ERROR */\n        , {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(credential) {\n    return this.signInWithCredential(credential);\n  }\n\n  signInAnonymously() {\n    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\n  }\n\n  signInWithCredential(credential) {\n    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\n  }\n\n  signInWithCustomToken(token) {\n    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\n  }\n\n  signInWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  async signInWithPopup(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async signInWithRedirect(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  updateCurrentUser(user) {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n\n  verifyPasswordResetCode(code) {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n  _delete() {\n    return this._delegate._delete();\n  }\n\n  linkUnderlyingAuth() {\n    this._delegate.wrapped = () => this;\n  }\n\n}\n\nAuth.Persistence = Persistence;\n\nfunction wrapObservers(nextOrObserver, error, complete) {\n  let next = nextOrObserver;\n\n  if (typeof nextOrObserver !== 'function') {\n    ({\n      next,\n      error,\n      complete\n    } = nextOrObserver);\n  } // We know 'next' is now a function\n\n\n  const oldNext = next;\n\n  const newNext = user => oldNext(user && User.getOrCreate(user));\n\n  return {\n    next: newNext,\n    error: error,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(apiKey, appName) {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName); // If \"self\" is available, add indexedDB\n\n\n  if (typeof self !== 'undefined' && !persistences.includes(exp.indexedDBLocalPersistence)) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  } // If \"window\" is available, add HTML Storage persistences\n\n\n  if (typeof window !== 'undefined') {\n    for (const persistence of [exp.browserLocalPersistence, exp.browserSessionPersistence]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  } // Add in-memory as a final fallback\n\n\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass PhoneAuthProvider {\n  constructor() {\n    this.providerId = 'phone'; // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\n  }\n\n  static credential(verificationId, verificationCode) {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\n    return this._delegate.verifyPhoneNumber( // The implementation matches but the types are subtly incompatible\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    phoneInfoOptions, applicationVerifier);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n}\n\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert = exp._assert;\n\nclass RecaptchaVerifier {\n  constructor(container, parameters) {\n    let app = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firebase.app();\n\n    var _a; // API key is required for web client RPC calls.\n\n\n    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    });\n\n    this._delegate = new exp.RecaptchaVerifier(container, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters, // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    app.auth());\n    this.type = this._delegate.type;\n  }\n\n  clear() {\n    this._delegate.clear();\n  }\n\n  render() {\n    return this._delegate.render();\n  }\n\n  verify() {\n    return this._delegate.verify();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst AUTH_TYPE = 'auth-compat'; // Create auth components to register with firebase.\n// Provides Auth public APIs.\n\nfunction registerAuthCompat(instance) {\n  instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const authProvider = container.getProvider('auth');\n    return new Auth(app, authProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ActionCodeInfo: {\n      Operation: {\n        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\n        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\n        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\n        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\n      }\n    },\n    EmailAuthProvider: exp.EmailAuthProvider,\n    FacebookAuthProvider: exp.FacebookAuthProvider,\n    GithubAuthProvider: exp.GithubAuthProvider,\n    GoogleAuthProvider: exp.GoogleAuthProvider,\n    OAuthProvider: exp.OAuthProvider,\n    SAMLAuthProvider: exp.SAMLAuthProvider,\n    PhoneAuthProvider: PhoneAuthProvider,\n    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\n    RecaptchaVerifier: RecaptchaVerifier,\n    TwitterAuthProvider: exp.TwitterAuthProvider,\n    Auth,\n    AuthCredential: exp.AuthCredential,\n    Error: FirebaseError\n  }).setInstantiationMode(\"LAZY\"\n  /* LAZY */\n  ).setMultipleInstances(false));\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase);","map":{"version":3,"sources":["../src/platform.ts","../src/persistence.ts","../src/popup_redirect.ts","../src/wrap.ts","../src/user_credential.ts","../src/user.ts","../src/auth.ts","../src/phone_auth_provider.ts","../src/recaptcha_verifier.ts","../index.ts"],"names":["impl","_assert","CompatAuthProvider","CompatRecaptchaVerifier"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' ||\n      _getCurrentScheme() === 'ionic:' ||\n      _getCurrentScheme() === 'capacitor:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n  _overrideRedirectResult = exp._overrideRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if ((e as FirebaseError)?.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any,\n\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!()\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module"}