{"ast":null,"code":"import { ap as _isIOS7Or8, aq as debugAssert, ar as _isIOS, as as _isAndroid, at as _fail, au as _getRedirectUrl, av as _getProjectConfig, aw as _createError, ax as _assert, ay as _getInstance, b as browserLocalPersistence, az as _persistenceKeyName, aA as AuthEventManager, a as browserSessionPersistence, aB as _getRedirectResult, aC as _overrideRedirectResult, aD as _clearRedirectOutcomes, aE as _castAuth } from './index-6bd8d405.js';\nexport { A as ActionCodeOperation, ad as ActionCodeURL, H as AuthCredential, D as AuthErrorCodes, aG as AuthImpl, aJ as AuthPopup, I as EmailAuthCredential, M as EmailAuthProvider, N as FacebookAuthProvider, F as FactorId, aK as FetchProvider, T as GithubAuthProvider, Q as GoogleAuthProvider, J as OAuthCredential, U as OAuthProvider, O as OperationType, K as PhoneAuthCredential, P as PhoneAuthProvider, m as PhoneMultiFactorGenerator, o as ProviderId, R as RecaptchaVerifier, aL as SAMLAuthCredential, V as SAMLAuthProvider, S as SignInMethod, W as TwitterAuthProvider, aF as UserImpl, ax as _assert, aE as _castAuth, at as _fail, aI as _generateEventId, aH as _getClientVersion, ay as _getInstance, aB as _getRedirectResult, aC as _overrideRedirectResult, az as _persistenceKeyName, a2 as applyActionCode, t as beforeAuthStateChanged, b as browserLocalPersistence, k as browserPopupRedirectResolver, a as browserSessionPersistence, a3 as checkActionCode, a1 as confirmPasswordReset, G as connectAuthEmulator, a5 as createUserWithEmailAndPassword, B as debugErrorMap, z as deleteUser, aa as fetchSignInMethodsForEmail, al as getAdditionalUserInfo, n as getAuth, ai as getIdToken, aj as getIdTokenResult, an as getMultiFactorResolver, j as getRedirectResult, L as inMemoryPersistence, i as indexedDBLocalPersistence, E as initializeAuth, a8 as isSignInWithEmailLink, Z as linkWithCredential, l as linkWithPhoneNumber, d as linkWithPopup, g as linkWithRedirect, ao as multiFactor, v as onAuthStateChanged, q as onIdTokenChanged, ae as parseActionCodeURL, C as prodErrorMap, _ as reauthenticateWithCredential, r as reauthenticateWithPhoneNumber, e as reauthenticateWithPopup, h as reauthenticateWithRedirect, am as reload, ab as sendEmailVerification, a0 as sendPasswordResetEmail, a7 as sendSignInLinkToEmail, p as setPersistence, X as signInAnonymously, Y as signInWithCredential, $ as signInWithCustomToken, a6 as signInWithEmailAndPassword, a9 as signInWithEmailLink, s as signInWithPhoneNumber, c as signInWithPopup, f as signInWithRedirect, y as signOut, ak as unlink, x as updateCurrentUser, ag as updateEmail, ah as updatePassword, u as updatePhoneNumber, af as updateProfile, w as useDeviceLanguage, ac as verifyBeforeUpdateEmail, a4 as verifyPasswordResetCode } from './index-6bd8d405.js';\nimport { querystringDecode } from '@firebase/util';\nimport '@firebase/app';\nimport 'tslib';\nimport '@firebase/logger';\nimport '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction _cordovaWindow() {\n  return window;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * How long to wait after the app comes back into focus before concluding that\r\n * the user closed the sign in tab.\r\n */\n\n\nconst REDIRECT_TIMEOUT_MS = 2000;\n/**\r\n * Generates the URL for the OAuth handler.\r\n */\n\nasync function _generateHandlerUrl(auth, event, provider) {\n  var _a; // Get the cordova plugins\n\n\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n  const additionalParams = {};\n\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  } // Add the display name if available\n\n\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  } // Attached the hashed session ID\n\n\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);\n}\n/**\r\n * Validates that this app is valid for this project configuration\r\n */\n\n\nasync function _validateOrigin(auth) {\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n\n  const request = {};\n\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  } // Will fail automatically if package name is not authorized\n\n\n  await _getProjectConfig(auth, request);\n}\n\nfunction _performRedirect(handlerUrl) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef = null;\n\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(handlerUrl, _isIOS7Or8() ? '_blank' : '_system', 'location=yes');\n      }\n\n      resolve(iabRef);\n    });\n  });\n}\n/**\r\n * This function waits for app activity to be seen before resolving. It does\r\n * this by attaching listeners to various dom events. Once the app is determined\r\n * to be visible, this promise resolves. AFTER that resolution, the listeners\r\n * are detached and any browser tabs left open will be closed.\r\n */\n\n\nasync function _waitForAppResume(auth, eventListener, iabRef) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n\n  let cleanup = () => {};\n\n  try {\n    await new Promise((resolve, reject) => {\n      let onCloseTimer = null; // DEFINE ALL THE CALLBACKS =====\n\n      function authEventSeen() {\n        var _a; // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n\n\n        resolve();\n        const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;\n\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        } // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n\n\n        if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed() {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, \"redirect-cancelled-by-user\"\n          /* REDIRECT_CANCELLED_BY_USER */\n          ));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged() {\n        if ((document === null || document === void 0 ? void 0 : document.visibilityState) === 'visible') {\n          resumed();\n        }\n      } // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n\n\n      eventListener.addPassiveListener(authEventSeen); // Listen for resume and visibility events\n\n      document.addEventListener('resume', resumed, false);\n\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      } // SETUP THE CLEANUP FUNCTION =====\n\n\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener('visibilitychange', visibilityChanged, false);\n\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n/**\r\n * Checks the configuration of the Cordova environment. This has no side effect\r\n * if the configuration is correct; otherwise it throws an error with the\r\n * missing plugin.\r\n */\n\n\nfunction _checkCordovaConfiguration(auth) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  const win = _cordovaWindow(); // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n\n\n  _assert(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-universal-links-plugin-fix'\n  }); // https://www.npmjs.com/package/cordova-plugin-buildinfo\n\n\n  _assert(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== 'undefined', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-buildInfo'\n  }); // https://github.com/google/cordova-plugin-browsertab\n\n\n  _assert(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-browsertab'\n  });\n\n  _assert(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-browsertab'\n  }); // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n\n\n  _assert(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-inappbrowser'\n  });\n}\n/**\r\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\r\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\r\n * protocol).\r\n */\n\n\nasync function computeSha256(sessionId) {\n  const bytes = stringToArrayBuffer(sessionId); // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str) {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(/[0-9a-zA-Z]+/.test(str), 'Can only convert alpha-numeric strings');\n\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n\n  return view;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SESSION_ID_LENGTH = 20;\n/** Custom AuthEventManager that adds passive listeners to events */\n\nclass CordovaAuthEventManager extends AuthEventManager {\n  constructor() {\n    super(...arguments);\n    this.passiveListeners = new Set();\n    this.initPromise = new Promise(resolve => {\n      this.resolveInialized = resolve;\n    });\n  }\n\n  addPassiveListener(cb) {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb) {\n    this.passiveListeners.delete(cb);\n  } // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n\n\n  resetRedirect() {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n  /** Override the onEvent method */\n\n\n  onEvent(event) {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized() {\n    await this.initPromise;\n  }\n\n}\n/**\r\n * Generates a (partial) {@link AuthEvent}.\r\n */\n\n\nfunction _generateNewEvent(auth, type) {\n  let eventId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, \"no-auth-event\"\n    /* NO_AUTH_EVENT */\n    )\n  };\n}\n\nfunction _savePartialEvent(auth, event) {\n  return storage()._set(persistenceKey(auth), event);\n}\n\nasync function _getAndRemoveEvent(auth) {\n  const event = await storage()._get(persistenceKey(auth));\n\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n\n  return event;\n}\n\nfunction _eventFromPartialAndUrl(partialEvent, url) {\n  var _a, _b; // Parse the deep link within the dynamic link URL.\n\n\n  const callbackUrl = _getDeepLinkFromCallback(url); // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n\n\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl); // Get the error object corresponding to the stringified error if found.\n\n    const errorObject = params['firebaseError'] ? parseJsonOrNull(decodeURIComponent(params['firebaseError'])) : null;\n    const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject['code']) === null || _a === void 0 ? void 0 : _a.split('auth/')) === null || _b === void 0 ? void 0 : _b[1];\n    const error = code ? _createError(code) : null;\n\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId() {\n  const chars = [];\n  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n\n  return chars.join('');\n}\n\nfunction storage() {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth) {\n  return _persistenceKeyName(\"authEvent\"\n  /* AUTH_EVENT */\n  , auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json) {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n} // Exported for testing\n\n\nfunction _getDeepLinkFromCallback(url) {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined; // Double link case (automatic redirect)\n\n  const doubleDeepLink = searchParamsOrEmpty(link)['link']; // iOS custom scheme links.\n\n  const iOSDeepLink = params['deep_link_id'] ? decodeURIComponent(params['deep_link_id']) : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * Optimistically tries to get search params from a string, or else returns an\r\n * empty search params object.\r\n */\n\n\nfunction searchParamsOrEmpty(url) {\n  if (!(url === null || url === void 0 ? void 0 : url.includes('?'))) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?'));\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * How long to wait for the initial auth event before concluding no\r\n * redirect pending\r\n */\n\n\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver {\n  constructor() {\n    this._redirectPersistence = browserSessionPersistence;\n    this._shouldInitProactively = true; // This is lightweight for Cordova\n\n    this.eventManagers = new Map();\n    this.originValidationPromises = {};\n    this._completeRedirectFn = _getRedirectResult;\n    this._overrideRedirectResult = _overrideRedirectResult;\n  }\n\n  async _initialize(auth) {\n    const key = auth._key();\n\n    let manager = this.eventManagers.get(key);\n\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n\n    return manager;\n  }\n\n  _openPopup(auth) {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  }\n\n  async _openRedirect(auth, provider, authType, eventId) {\n    _checkCordovaConfiguration(auth);\n\n    const manager = await this._initialize(auth);\n    await manager.initialized(); // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n\n    manager.resetRedirect();\n\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(_auth, _cb) {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth) {\n    const key = auth._key();\n\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  attachCallbackListeners(auth, manager) {\n    // Get the global plugins\n    const {\n      universalLinks,\n      handleOpenURL,\n      BuildInfo\n    } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async eventData => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent = null;\n\n      if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData['url'])) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      } // If finalEvent is never filled, trigger with no event\n\n\n      manager.onEvent(finalEvent || generateNoEvent());\n    }; // Universal links subscriber doesn't exist for iOS, so we need to check\n\n\n    if (typeof universalLinks !== 'undefined' && typeof universalLinks.subscribe === 'function') {\n      universalLinks.subscribe(null, universalLinksCb);\n    } // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n\n\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({\n          url\n        });\n      } // Call the developer's handler if it is present.\n\n\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n\n}\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\r\n * based applications.\r\n *\r\n * @public\r\n */\n\n\nconst cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;\n\nfunction generateNoEvent() {\n  return {\n    type: \"unknown\"\n    /* UNKNOWN */\n    ,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(\"no-auth-event\"\n    /* NO_AUTH_EVENT */\n    )\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\n\n\nfunction addFrameworkForLogging(auth, framework) {\n  _castAuth(auth)._logFramework(framework);\n}\n\nexport { addFrameworkForLogging, cordovaPopupRedirectResolver };","map":{"version":3,"sources":["../../src/platform_cordova/plugins.ts","../../src/platform_cordova/popup_redirect/utils.ts","../../src/platform_cordova/popup_redirect/events.ts","../../src/platform_cordova/popup_redirect/popup_redirect.ts","../../internal/index.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;;SAoCa,c,GAAc;EAC5B,OAAO,MAAP;AACF;ACrDA;;;;;;;;;;;;;;;AAeG;;AAoBH;;;AAGG;;;AACH,MAAM,mBAAmB,GAAG,IAA5B;AAEA;;AAEG;;AACI,eAAe,mBAAf,CACL,IADK,EAEL,KAFK,EAGL,QAHK,EAGiB;SAAA,C;;;EAGtB,MAAM;IAAE;EAAF,IAAgB,cAAc,EAApC;;EACA,WAAW,CAAC,KAAK,CAAC,SAAP,EAAkB,wCAAlB,CAAX;EACA,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,SAAP,CAAzC;EAEA,MAAM,gBAAgB,GAA2B,EAAjD;;EACA,IAAI,MAAM,EAAV,EAAc;;IAEZ,gBAAgB,CAAC,KAAD,CAAhB,GAA0B,SAAS,CAAC,WAApC;EACD,CAHD,MAGO,IAAI,UAAU,EAAd,EAAkB;;IAEvB,gBAAgB,CAAC,KAAD,CAAhB,GAA0B,SAAS,CAAC,WAApC;EACD,CAHM,MAGA;IACL,KAAK,CAAC,IAAD,EAAK;IAAA;IAAL,CAAL;EACD,CAhBqB,C;;;EAmBtB,IAAI,SAAS,CAAC,WAAd,EAA2B;IACzB,gBAAgB,CAAC,gBAAD,CAAhB,GAAqC,SAAS,CAAC,WAA/C;EACD,CArBqB,C;;;EAwBtB,gBAAgB,CAAC,WAAD,CAAhB,GAAgC,aAAhC;EACA,OAAO,eAAe,CACpB,IADoB,EAEpB,QAFoB,EAGpB,KAAK,CAAC,IAHc,EAIpB,SAJoB,EAKpB,CAAA,EAAA,GAAA,KAAK,CAAC,OAAN,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,EAAb,GAAiB,SALG,EAMpB,gBANoB,CAAtB;AAQD;AAED;;AAEG;;;AACI,eAAe,eAAf,CAA+B,IAA/B,EAAiD;EACtD,MAAM;IAAE;EAAF,IAAgB,cAAc,EAApC;;EACA,MAAM,OAAO,GAA4B,EAAzC;;EACA,IAAI,MAAM,EAAV,EAAc;IACZ,OAAO,CAAC,WAAR,GAAsB,SAAS,CAAC,WAAhC;EACD,CAFD,MAEO,IAAI,UAAU,EAAd,EAAkB;IACvB,OAAO,CAAC,kBAAR,GAA6B,SAAS,CAAC,WAAvC;EACD,CAFM,MAEA;IACL,KAAK,CAAC,IAAD,EAAK;IAAA;IAAL,CAAL;EACD,CATqD,C;;;EAYtD,MAAM,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAAvB;AACD;;AAEK,SAAU,gBAAV,CACJ,UADI,EACc;;EAGlB,MAAM;IAAE;EAAF,IAAc,cAAc,EAAlC;;EAEA,OAAO,IAAI,OAAJ,CAAY,OAAO,IAAG;IAC3B,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAA2B,WAA3B,CAAuC,qBAAqB,IAAG;MAC7D,IAAI,MAAM,GAA2B,IAArC;;MACA,IAAI,qBAAJ,EAA2B;QACzB,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAA2B,OAA3B,CAAmC,UAAnC;MACD,CAFD,MAEO;;QAEL,MAAM,GAAG,OAAO,CAAC,YAAR,CAAqB,IAArB,CACP,UADO,EAEP,UAAU,KAAK,QAAL,GAAgB,SAFnB,EAGP,cAHO,CAAT;MAKD;;MACD,OAAO,CAAC,MAAD,CAAP;IACD,CAbD;EAcD,CAfM,CAAP;AAgBD;AAQD;;;;;AAKG;;;AACI,eAAe,iBAAf,CACL,IADK,EAEL,aAFK,EAGL,MAHK,EAGyB;;EAG9B,MAAM;IAAE;EAAF,IAAc,cAAc,EAAlC;;EAEA,IAAI,OAAO,GAAG,MAAW,CAAG,CAA5B;;EACA,IAAI;IACF,MAAM,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,MAAV,KAAoB;MAC1C,IAAI,YAAY,GAAkB,IAAlC,CAD0C,C;;MAI1C,SAAS,aAAT,GAAsB;eAAA,C;;;;QAGpB,OAAO;QACP,MAAM,eAAe,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,OAAR,CAAgB,UAAhB,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,KAAA,CAA5B,GAA4B,EAAA,CAAA,KAApD;;QACA,IAAI,OAAO,eAAP,KAA2B,UAA/B,EAA2C;UACzC,eAAe;QAChB,CAPmB,C;;;;QAUpB,IAAI,QAAO,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,KAAf,MAAyB,UAA7B,EAAyC;UACvC,MAAM,CAAC,KAAP;QACD;MACF;;MAED,SAAS,OAAT,GAAgB;QACd,IAAI,YAAJ,EAAkB;;UAEhB;QACD;;QAED,YAAY,GAAG,MAAM,CAAC,UAAP,CAAkB,MAAK;;UAEpC,MAAM,CAAC,YAAY,CAAC,IAAD,EAAK;UAAA;UAAL,CAAb,CAAN;QACD,CAHc,EAGZ,mBAHY,CAAf;MAID;;MAED,SAAS,iBAAT,GAA0B;QACxB,IAAI,CAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,eAAV,MAA8B,SAAlC,EAA6C;UAC3C,OAAO;QACR;MACF,CAnCyC,C;;;;MAuC1C,aAAa,CAAC,kBAAd,CAAiC,aAAjC,EAvC0C,C;;MA0C1C,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,EAA6C,KAA7C;;MACA,IAAI,UAAU,EAAd,EAAkB;QAChB,QAAQ,CAAC,gBAAT,CAA0B,kBAA1B,EAA8C,iBAA9C,EAAiE,KAAjE;MACD,CA7CyC,C;;;MAgD1C,OAAO,GAAG,MAAK;QACb,aAAa,CAAC,qBAAd,CAAoC,aAApC;QACA,QAAQ,CAAC,mBAAT,CAA6B,QAA7B,EAAuC,OAAvC,EAAgD,KAAhD;QACA,QAAQ,CAAC,mBAAT,CACE,kBADF,EAEE,iBAFF,EAGE,KAHF;;QAKA,IAAI,YAAJ,EAAkB;UAChB,MAAM,CAAC,YAAP,CAAoB,YAApB;QACD;MACF,CAXD;IAYD,CA5DK,CAAN;EA6DD,CA9DD,SA8DU;IACR,OAAO;EACR;AACF;AAED;;;;AAIG;;;AACG,SAAU,0BAAV,CAAqC,IAArC,EAAuD;;;EAC3D,MAAM,GAAG,GAAG,cAAc,EAA1B,CAD2D,C;;;;;;;EAO3D,OAAO,CACL,QAAO,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,cAAL,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,SAA5B,MAA0C,UADrC,EAEL,IAFK,EAIL;EAAA;EAJK,EAIL;IACE,aAAa,EAAE;EADjB,CAJK,CAAP,CAP2D,C;;;EAiB3D,OAAO,CACL,QAAO,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,SAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,WAAvB,MAAuC,WADlC,EAEL,IAFK,EAIL;EAAA;EAJK,EAIL;IACE,aAAa,EAAE;EADjB,CAJK,CAAP,CAjB2D,C;;;EA2B3D,OAAO,CACL,QAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,OAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAA,OAAd,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAA,UAAvB,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAA,OAA1C,MAAsD,UADjD,EAEL,IAFK,EAIL;EAAA;EAJK,EAIL;IACE,aAAa,EAAE;EADjB,CAJK,CAAP;;EAQA,OAAO,CACL,QAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,OAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAA,OAAd,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAA,UAAvB,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAA,WAA1C,MAA0D,UADrD,EAEL,IAFK,EAIL;EAAA;EAJK,EAIL;IACE,aAAa,EAAE;EADjB,CAJK,CAAP,CAnC2D,C;;;EA6C3D,OAAO,CACL,QAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,YAAd,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,KAAA,CAA5B,GAA4B,EAAA,CAAA,IAAnC,MAA4C,UADvC,EAEL,IAFK,EAIL;EAAA;EAJK,EAIL;IACE,aAAa,EAAE;EADjB,CAJK,CAAP;AAQD;AAED;;;;AAIG;;;AACH,eAAe,aAAf,CAA6B,SAA7B,EAA8C;EAC5C,MAAM,KAAK,GAAG,mBAAmB,CAAC,SAAD,CAAjC,CAD4C,C;;;;;EAO5C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,SAArB,EAAgC,KAAhC,CAAlB;EACA,MAAM,GAAG,GAAG,KAAK,CAAC,IAAN,CAAW,IAAI,UAAJ,CAAe,GAAf,CAAX,CAAZ;EACA,OAAO,GAAG,CAAC,GAAJ,CAAQ,GAAG,IAAI,GAAG,CAAC,QAAJ,CAAa,EAAb,EAAiB,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAAf,EAAkD,IAAlD,CAAuD,EAAvD,CAAP;AACD;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAwC;;;EAGtC,WAAW,CACT,eAAe,IAAf,CAAoB,GAApB,CADS,EAET,wCAFS,CAAX;;EAIA,IAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;IACtC,OAAO,IAAI,WAAJ,GAAkB,MAAlB,CAAyB,GAAzB,CAAP;EACD;;EAED,MAAM,IAAI,GAAG,IAAI,WAAJ,CAAgB,GAAG,CAAC,MAApB,CAAb;EACA,MAAM,IAAI,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;IACnC,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAV;EACD;;EACD,OAAO,IAAP;AACF;AClTA;;;;;;;;;;;;;;;AAeG;;;AAgBH,MAAM,iBAAiB,GAAG,EAA1B;AAEA;;AACM,MAAO,uBAAP,SAAuC,gBAAvC,CAAuD;EAA7D,WAAA,GAAA;;IACmB,KAAA,gBAAA,GAAmB,IAAI,GAAJ,EAAnB;IAET,KAAA,WAAA,GAAc,IAAI,OAAJ,CAAkB,OAAO,IAAG;MAChD,KAAK,gBAAL,GAAwB,OAAxB;IACD,CAFqB,CAAd;EA6BT;;EAzBC,kBAAkB,CAAC,EAAD,EAA2B;IAC3C,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,EAA1B;EACD;;EAED,qBAAqB,CAAC,EAAD,EAA2B;IAC9C,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,EAA7B;EACD,CAb0D,C;;;;EAiB3D,aAAa,GAAA;IACX,KAAK,mBAAL,GAA2B,IAA3B;IACA,KAAK,2BAAL,GAAmC,KAAnC;EACD;;;;EAGD,OAAO,CAAC,KAAD,EAAiB;IACtB,KAAK,gBAAL;IACA,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,EAAE,IAAI,EAAE,CAAC,KAAD,CAAtC;IACA,OAAO,MAAM,OAAN,CAAc,KAAd,CAAP;EACD;;EAEgB,MAAX,WAAW,GAAA;IACf,MAAM,KAAK,WAAX;EACD;;AA/B0D;AAkC7D;;AAEG;;;AACG,SAAU,iBAAV,CACJ,IADI,EAEJ,IAFI,EAGyB;EAAA,IAA7B,OAA6B,uEAAJ,IAAI;EAE7B,OAAO;IACL,IADK;IAEL,OAFK;IAGL,WAAW,EAAE,IAHR;IAIL,SAAS,EAAE,iBAAiB,EAJvB;IAKL,QAAQ,EAAE,IALL;IAML,QAAQ,EAAE,IAAI,CAAC,QANV;IAOL,KAAK,EAAE,YAAY,CAAC,IAAD,EAAmC;IAAA;IAAnC;EAPd,CAAP;AASD;;AAEe,SAAA,iBAAA,CACd,IADc,EAEd,KAFc,EAEE;EAEhB,OAAO,OAAO,GAAG,IAAV,CAAe,cAAc,CAAC,IAAD,CAA7B,EAAqC,KAArC,CAAP;AACD;;AAEM,eAAe,kBAAf,CACL,IADK,EACa;EAElB,MAAM,KAAK,GAAI,MAAM,OAAO,GAAG,IAAV,CACnB,cAAc,CAAC,IAAD,CADK,CAArB;;EAGA,IAAI,KAAJ,EAAW;IACT,MAAM,OAAO,GAAG,OAAV,CAAkB,cAAc,CAAC,IAAD,CAAhC,CAAN;EACD;;EACD,OAAO,KAAP;AACD;;AAEe,SAAA,uBAAA,CACd,YADc,EAEd,GAFc,EAEH;aAAA,C;;;EAGX,MAAM,WAAW,GAAG,wBAAwB,CAAC,GAAD,CAA5C,CAHW,C;;;;;;;EASX,IAAI,WAAW,CAAC,QAAZ,CAAqB,mBAArB,CAAJ,EAA+C;;;;IAI7C,MAAM,MAAM,GAAG,mBAAmB,CAAC,WAAD,CAAlC,CAJ6C,C;;IAM7C,MAAM,WAAW,GAAG,MAAM,CAAC,eAAD,CAAN,GAChB,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,eAAD,CAAP,CAAnB,CADC,GAEhB,IAFJ;IAGA,MAAM,IAAI,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,WAAW,KAAX,IAAA,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAG,MAAH,CAAX,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,KAAF,CAAQ,OAAR,CAArB,MAAwC,IAAxC,IAAwC,EAAA,KAAA,KAAA,CAAxC,GAAwC,KAAA,CAAxC,GAAwC,EAAA,CAAA,CAAA,CAArD;IACA,MAAM,KAAK,GAAG,IAAI,GAAG,YAAY,CAAC,IAAD,CAAf,GAAwB,IAA1C;;IACA,IAAI,KAAJ,EAAW;MACT,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,IADd;QAEL,OAAO,EAAE,YAAY,CAAC,OAFjB;QAGL,QAAQ,EAAE,YAAY,CAAC,QAHlB;QAIL,KAJK;QAKL,WAAW,EAAE,IALR;QAML,SAAS,EAAE,IANN;QAOL,QAAQ,EAAE;MAPL,CAAP;IASD,CAVD,MAUO;MACL,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,IADd;QAEL,OAAO,EAAE,YAAY,CAAC,OAFjB;QAGL,QAAQ,EAAE,YAAY,CAAC,QAHlB;QAIL,SAAS,EAAE,YAAY,CAAC,SAJnB;QAKL,WAAW,EAAE,WALR;QAML,QAAQ,EAAE;MANL,CAAP;IAQD;EACF;;EAED,OAAO,IAAP;AACD;;AAED,SAAS,iBAAT,GAA0B;EACxB,MAAM,KAAK,GAAG,EAAd;EACA,MAAM,YAAY,GAChB,gEADF;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,iBAApB,EAAuC,CAAC,EAAxC,EAA4C;IAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,YAAY,CAAC,MAAxC,CAAZ;IACA,KAAK,CAAC,IAAN,CAAW,YAAY,CAAC,MAAb,CAAoB,GAApB,CAAX;EACD;;EACD,OAAO,KAAK,CAAC,IAAN,CAAW,EAAX,CAAP;AACD;;AAED,SAAS,OAAT,GAAgB;EACd,OAAO,YAAY,CAAC,uBAAD,CAAnB;AACD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA0C;EACxC,OAAO,mBAAmB,CAAA;EAAA;EAAA,EAAqB,IAAI,CAAC,MAAL,CAAY,MAAjC,EAAyC,IAAI,CAAC,IAA9C,CAA1B;AACD;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAqC;EACnC,IAAI;IACF,OAAO,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;EACD,CAFD,CAEE,OAAO,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACF,C,CAED;;;AACM,SAAU,wBAAV,CAAmC,GAAnC,EAA8C;EAClD,MAAM,MAAM,GAAG,mBAAmB,CAAC,GAAD,CAAlC;EACA,MAAM,IAAI,GAAG,MAAM,CAAC,MAAD,CAAN,GAAiB,kBAAkB,CAAC,MAAM,CAAC,MAAD,CAAP,CAAnC,GAAsD,SAAnE,CAFkD,C;;EAIlD,MAAM,cAAc,GAAG,mBAAmB,CAAC,IAAD,CAAnB,CAA0B,MAA1B,CAAvB,CAJkD,C;;EAMlD,MAAM,WAAW,GAAG,MAAM,CAAC,cAAD,CAAN,GAChB,kBAAkB,CAAC,MAAM,CAAC,cAAD,CAAP,CADF,GAEhB,SAFJ;EAGA,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAD,CAAnB,CAAiC,MAAjC,CAA1B;EACA,OAAO,iBAAiB,IAAI,WAArB,IAAoC,cAApC,IAAsD,IAAtD,IAA8D,GAArE;AACD;AAED;;;AAGG;;;AACH,SAAS,mBAAT,CAA6B,GAA7B,EAAoD;EAClD,IAAI,EAAC,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,QAAL,CAAc,GAAd,CAAD,CAAJ,EAAyB;IACvB,OAAO,EAAP;EACD;;EAED,MAAM,CAAC,CAAD,EAAI,GAAG,IAAP,IAAe,GAAG,CAAC,KAAJ,CAAU,GAAV,CAArB;EACA,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAL,CAAU,GAAV,CAAD,CAAxB;AACF;AC7MA;;;;;;;;;;;;;;;AAeG;;AAmCH;;;AAGG;;;AACH,MAAM,wBAAwB,GAAG,GAAjC;;AAEA,MAAM,4BAAN,CAAkC;EAAlC,WAAA,GAAA;IACW,KAAoB,oBAApB,GAAuB,yBAAvB;IACA,KAAA,sBAAA,GAAyB,IAAzB,CAFX,CAEyC;;IACtB,KAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;IACA,KAAwB,wBAAxB,GAA0D,EAA1D;IAEjB,KAAmB,mBAAnB,GAAsB,kBAAtB;IACA,KAAuB,uBAAvB,GAA0B,uBAA1B;EAwHD;;EAtHkB,MAAX,WAAW,CAAC,IAAD,EAAmB;IAClC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAL,EAAZ;;IACA,IAAI,OAAO,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,CAAd;;IACA,IAAI,CAAC,OAAL,EAAc;MACZ,OAAO,GAAG,IAAI,uBAAJ,CAA4B,IAA5B,CAAV;MACA,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,EAA4B,OAA5B;MACA,KAAK,uBAAL,CAA6B,IAA7B,EAAmC,OAAnC;IACD;;IACD,OAAO,OAAP;EACD;;EAED,UAAU,CAAC,IAAD,EAAmB;IAC3B,KAAK,CAAC,IAAD,EAAK;IAAA;IAAL,CAAL;EACD;;EAEkB,MAAb,aAAa,CACjB,IADiB,EAEjB,QAFiB,EAGjB,QAHiB,EAIjB,OAJiB,EAID;IAEhB,0BAA0B,CAAC,IAAD,CAA1B;;IACA,MAAM,OAAO,GAAG,MAAM,KAAK,WAAL,CAAiB,IAAjB,CAAtB;IACA,MAAM,OAAO,CAAC,WAAR,EAAN,CAJgB,C;;;;IAShB,OAAO,CAAC,aAAR;;IACA,sBAAsB;;IAEtB,MAAM,KAAK,iBAAL,CAAuB,IAAvB,CAAN;;IAEA,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,EAAO,QAAP,EAAiB,OAAjB,CAA/B;;IACA,MAAM,iBAAiB,CAAC,IAAD,EAAO,KAAP,CAAvB;IACA,MAAM,GAAG,GAAG,MAAM,mBAAmB,CAAC,IAAD,EAAO,KAAP,EAAc,QAAd,CAArC;IACA,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,GAAD,CAArC;IACA,OAAO,iBAAiB,CAAC,IAAD,EAAO,OAAP,EAAgB,MAAhB,CAAxB;EACD;;EAED,4BAA4B,CAC1B,KAD0B,EAE1B,GAF0B,EAEQ;IAElC,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;EACD;;EAED,iBAAiB,CAAC,IAAD,EAAmB;IAClC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAL,EAAZ;;IACA,IAAI,CAAC,KAAK,wBAAL,CAA8B,GAA9B,CAAL,EAAyC;MACvC,KAAK,wBAAL,CAA8B,GAA9B,IAAqC,eAAe,CAAC,IAAD,CAApD;IACD;;IAED,OAAO,KAAK,wBAAL,CAA8B,GAA9B,CAAP;EACD;;EAEO,uBAAuB,CAC7B,IAD6B,EAE7B,OAF6B,EAEJ;;IAGzB,MAAM;MAAE,cAAF;MAAkB,aAAlB;MAAiC;IAAjC,IAA+C,cAAc,EAAnE;;IAEA,MAAM,cAAc,GAAG,UAAU,CAAC,YAAW;;;MAG3C,MAAM,kBAAkB,CAAC,IAAD,CAAxB;MACA,OAAO,CAAC,OAAR,CAAgB,eAAe,EAA/B;IACD,CALgC,EAK9B,wBAL8B,CAAjC;;IAOA,MAAM,gBAAgB,GAAG,MACvB,SADuB,IAEN;;MAEjB,YAAY,CAAC,cAAD,CAAZ;MAEA,MAAM,YAAY,GAAG,MAAM,kBAAkB,CAAC,IAAD,CAA7C;MACA,IAAI,UAAU,GAAqB,IAAnC;;MACA,IAAI,YAAY,KAAI,SAAS,KAAT,IAAA,IAAA,SAAS,KAAT,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAG,KAAH,CAAb,CAAhB,EAAwC;QACtC,UAAU,GAAG,uBAAuB,CAAC,YAAD,EAAe,SAAS,CAAC,KAAD,CAAxB,CAApC;MACD,CARgB,C;;;MAWjB,OAAO,CAAC,OAAR,CAAgB,UAAU,IAAI,eAAe,EAA7C;IACD,CAdD,CAZyB,C;;;IA6BzB,IACE,OAAO,cAAP,KAA0B,WAA1B,IACA,OAAO,cAAc,CAAC,SAAtB,KAAoC,UAFtC,EAGE;MACA,cAAc,CAAC,SAAf,CAAyB,IAAzB,EAA+B,gBAA/B;IACD,CAlCwB,C;;;;;;;IAyCzB,MAAM,qBAAqB,GAAG,aAA9B;IACA,MAAM,aAAa,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,WAAtB,EAAmC,KAA5D;;IACA,cAAc,GAAG,aAAjB,GAAiC,MAAM,GAAN,IAAY;MAC3C,IAAI,GAAG,CAAC,WAAJ,GAAkB,UAAlB,CAA6B,aAA7B,CAAJ,EAAiD;;;QAG/C,gBAAgB,CAAC;UAAE;QAAF,CAAD,CAAhB;MACD,CAL0C,C;;;MAO3C,IAAI,OAAO,qBAAP,KAAiC,UAArC,EAAiD;QAC/C,IAAI;UACF,qBAAqB,CAAC,GAAD,CAArB;QACD,CAFD,CAEE,OAAO,CAAP,EAAU;;UAEV,OAAO,CAAC,KAAR,CAAc,CAAd;QACD;MACF;IACF,CAfD;EAgBD;;AA9H+B;AAiIlC;;;;;AAKG;;;AACI,MAAM,4BAA4B,GACvC,4BADK;;AAGP,SAAS,eAAT,GAAwB;EACtB,OAAO;IACL,IAAI,EAAuB;IAAA;IADtB;IAEL,OAAO,EAAE,IAFJ;IAGL,SAAS,EAAE,IAHN;IAIL,WAAW,EAAE,IAJR;IAKL,QAAQ,EAAE,IALL;IAML,QAAQ,EAAE,IANL;IAOL,KAAK,EAAE,YAAY,CAA6B;IAAA;IAA7B;EAPd,CAAP;AASF;AC5MA;;;;;;;;;;;;;;;AAeG;AAqCH;AACA;AACA;;;AACgB,SAAA,sBAAA,CAAuB,IAAvB,EAAmC,SAAnC,EAAoD;EAClE,SAAS,CAAC,IAAD,CAAT,CAAgB,aAAhB,CAA8B,SAA9B;AACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return window as unknown as CordovaWindow;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(persistenceKey(auth), event as object as PersistedBlob);\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport {\n  _clearRedirectOutcomes,\n  _overrideRedirectResult\n} from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n  _overrideRedirectResult = _overrideRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _castAuth } from '../src/core/auth/auth_impl';\nimport { Auth } from '../src/model/public_types';\n\n/**\n * This interface is intended only for use by @firebase/auth-compat, do not use directly\n */\nexport * from '../index';\n\nexport { SignInWithIdpResponse } from '../src/api/authentication/idp';\nexport { AuthErrorCode } from '../src/core/errors';\nexport { PersistenceInternal } from '../src/core/persistence';\nexport { _persistenceKeyName } from '../src/core/persistence/persistence_user_manager';\nexport { UserImpl } from '../src/core/user/user_impl';\nexport { _getInstance } from '../src/core/util/instantiator';\nexport {\n  PopupRedirectResolverInternal,\n  EventManager,\n  AuthEventType\n} from '../src/model/popup_redirect';\nexport { UserCredentialInternal, UserParameters } from '../src/model/user';\nexport { AuthInternal, ConfigInternal } from '../src/model/auth';\nexport { DefaultConfig, AuthImpl, _castAuth } from '../src/core/auth/auth_impl';\n\nexport { ClientPlatform, _getClientVersion } from '../src/core/util/version';\n\nexport { _generateEventId } from '../src/core/util/event_id';\nexport { TaggedWithTokenResponse } from '../src/model/id_token';\nexport { _fail, _assert } from '../src/core/util/assert';\nexport { AuthPopup } from '../src/platform_browser/util/popup';\nexport { _getRedirectResult } from '../src/platform_browser/strategies/redirect';\nexport { _overrideRedirectResult } from '../src/core/strategies/redirect';\nexport { cordovaPopupRedirectResolver } from '../src/platform_cordova/popup_redirect/popup_redirect';\nexport { FetchProvider } from '../src/core/util/fetch_provider';\nexport { SAMLAuthCredential } from '../src/core/credentials/saml';\n\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nexport function addFrameworkForLogging(auth: Auth, framework: string): void {\n  _castAuth(auth)._logFramework(framework);\n}\n"]},"metadata":{},"sourceType":"module"}